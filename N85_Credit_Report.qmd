---
title: "N85_Credit_Report"
format: html
editor: visual
---

```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, DBI, odbc, padr)

```

```{r}
# Connect to the `PLAYGROUND` database and append data if necessary
tryCatch({
  db_connection <- DBI::dbConnect(odbc::odbc(),  # Establish a database connection using ODBC for the playground database
                                     Driver = "SnowflakeDSIIDriver",  # Specify the Snowflake ODBC driver
                                     Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",  # Server address
                                     WAREHOUSE = "DATA_LAKE_READER",  # Specify the Snowflake warehouse
                                     Database = "ENTERPRISE",  # Specify the database name
                                     UID = "jacob.eisaguirre@hawaiianair.com",  # User ID for authentication
                                     authenticator = "externalbrowser")  # Use external browser for authentication
  print("Database Connected!")  # Print success message if connection is established
}, error = function(cond) {
  print("Unable to connect to Database.")  # Print error message if connection fails
})

# Set schema and retrieve data from `AA_FINAL_PAIRING` table
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS") 



```

```{r}

q_master_history <- "SELECT * FROM CT_MASTER_HISTORY WHERE BID_PERIOD = '2024-10';"

ms <- dbGetQuery(db_connection, q_master_history) 


min_date <- min(ms$PAIRING_DATE, na.rm = TRUE) 

max_date <- max(ms$PAIRING_DATE, na.rm = TRUE) 



q_msched <- paste0("select * from CT_FLIGHT_LEG WHERE PAIRING_DATE BETWEEN'", min_date,"' AND '", max_date,"';")

raw_fl <- dbGetQuery(db_connection, q_msched)

```



## Reserve List
```{r}

rlv_FAs <- ms %>% 
  #filter(PAIRING_DATE == "2024-10-25") %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID) %>% 
  filter(#update_dt == max(update_dt), 
         CREW_INDICATOR == "FA",
         TRANSACTION_CODE %in% c("RLV", "RSV", "ARC")) %>% 
  ungroup() %>% 
  select(CREW_ID) %>% 
  distinct()

```

## Get Reserve ASN Credit
```{r}

explore_asn <- ms %>%
  filter(CREW_ID %in% rlv_FAs$CREW_ID,
         CREW_INDICATOR == "FA",
         #PAIRING_DATE == "2024-10-25",
         ) %>%
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
  group_by(CREW_ID, PAIRING_DATE) %>%
  filter(update_dt == max(update_dt),
         TRANSACTION_CODE %in% c("ASN")) %>% 
  select(CREW_ID, BID_PERIOD, BASE, PAIRING_NO, PAIRING_DATE, TO_DATE, PAIRING_POSITION) %>% 
  ungroup() 
# %>% 
#   pivot_longer(cols = c("PAIRING_DATE", "TO_DATE"), values_to = "PAIRING_DATE") %>% 
#   group_by(CREW_ID, BASE, PAIRING_NO) %>%
#   pad() %>% 
#   fill(.direction = c("down"))


  


```

## Credit from Master History
```{r}

cred_ms <- raw_fl %>% 
  filter(#SCHED_CREDIT > 0,
         #PAIRING_DATE == "2024-10-25",
         ) %>% 
  group_by(FLIGHT_NO, PAIRING_DATE, PAIRING_NO, FLIGHT_DATE, DEPARTING_CITY, 
           ARRIVAL_CITY, SCHED_DEPARTURE_DATE, SCHED_DEPARTURE_TIME, SCHED_ARRIVAL_DATE,
           SCHED_ARRIVAL_TIME) %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
  mutate(temp_id = cur_group_id()) %>%
  filter(is.na(DEADHEAD),
         #!duplicated(temp_id)
         ) %>%
  #filter(PAIRING_NO %in% explore_asn$PAIRING_NO) %>%
  select(FLIGHT_NO, PAIRING_DATE, PAIRING_NO, SCHED_CREDIT, ACT_CREDIT, ACT_CREDIT_OVERRIDDEN,
         DEPARTING_CITY, ARRIVAL_CITY, SCHED_DEPARTURE_DATE, SCHED_DEPARTURE_TIME, SCHED_ARRIVAL_DATE,
           SCHED_ARRIVAL_TIME) %>% 
  ungroup() %>% 
  distinct()
  

```

## RLV ASN employee level credit
```{r}

cred_emp <- left_join(explore_asn, cred_ms, by = c("PAIRING_DATE", "PAIRING_NO"), relationship = "many-to-many") %>%
  mutate(
    # Ensure ACT_CREDIT is in Period format for calculations
    ACT_CREDIT = as.period(ACT_CREDIT),
    
    # Set ACT_CREDIT based on condition, assigning hms duration for "H3500" and retaining original otherwise
    ACT_CREDIT = case_when(
      str_detect(PAIRING_NO, "H3500") ~ hms("00:04:10"),
      TRUE ~ ACT_CREDIT
    ),
    
    # Convert ACT_CREDIT to decimal hours format
    ACT_CREDIT = hour(ACT_CREDIT) + minute(ACT_CREDIT) / 60 + second(ACT_CREDIT) / 3600
  ) %>% 
  # Filter rows where ACT_CREDIT is greater than 0
  filter(ACT_CREDIT > 0)

missing_crew <- anti_join(explore_asn, cred_emp, by = c("CREW_ID"))

```


```{r}
t <- cred_emp %>% 
  group_by(CREW_ID) %>% 
  reframe(sum_hours = sum(ACT_CREDIT))
```


```{r}
# Connect to the `PLAYGROUND` database and append data if necessary
tryCatch({
  db_connection <- DBI::dbConnect(odbc::odbc(),  # Establish a database connection using ODBC for the playground database
                                     Driver = "SnowflakeDSIIDriver",  # Specify the Snowflake ODBC driver
                                     Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",  # Server address
                                     WAREHOUSE = "DATA_LAKE_READER",  # Specify the Snowflake warehouse
                                     Database = "RAW",  # Specify the database name
                                     UID = "jacob.eisaguirre@hawaiianair.com",  # User ID for authentication
                                     authenticator = "externalbrowser")  # Use external browser for authentication
  print("Database Connected!")  # Print success message if connection is established
}, error = function(cond) {
  print("Unable to connect to Database.")  # Print error message if connection fails
})

# Set schema and retrieve data from `AA_FINAL_PAIRING` table
dbExecute(db_connection, "USE SCHEMA HA") 

ctc_ms <- "select * from CTC_CREWTRACCABIN_MASTER_SCHEDULE WHERE MASTID_BIDATE = '202410';"

raw_ctc_ms <- dbGetQuery(db_connection, ctc_ms)

ctc_ms <- raw_ctc_ms %>%
  # Combine date and time fields
  mutate(update_dt = paste(UPDATEID_UPDDATE, UPDATEID_UPDTIME, sep = "")) %>%
  mutate(
    EFFECTIVE_FROMDATE = as.Date(EFFECTIVE_FROMDATE, format = "%Y%m%d"),
    EFFECTIVE_TODATE = as.Date(EFFECTIVE_TODATE, format = "%Y%m%d")
  ) %>%
  group_by(MASTID_EMPNO) %>% 
  filter(update_dt == max(update_dt)) %>% 
  select(MASTID_EMPNO, MASTID_BIDATE, BASE, EFFECTIVE_FROMDATE, EFFECTIVE_TODATE, PAYHRS) %>% 
  rename(
    CREW_ID = MASTID_EMPNO,
    BID_PERIOD = MASTID_BIDATE
  ) %>% 
  filter(
    CREW_ID %in% c(rlv_FAs$CREW_ID),
    PAYHRS > 0
  ) %>%
  # Convert PAYHRS to decimal hours
  mutate(PAYHRS = PAYHRS / 60)

  

```

```{r}


# Filter data to only include PAYHRS > 50 and arrange by PAYHRS
ctc_ms_filtered <- ctc_ms %>% 
  #filter(PAYHRS > 100) %>%
  arrange(desc(PAYHRS)) %>%  # Arrange in ascending order for descending plot order
  mutate(CREW_ID = factor(CREW_ID, levels = unique(CREW_ID)))  # Order CREW_ID by PAYHRS in ascending order

# Create the plot with descending bars
ggplot(ctc_ms_filtered, aes(x = CREW_ID, y = PAYHRS)) +
  geom_bar(stat = "identity") +
  labs(x = "Crew ID", y = "Pay Hours (Decimal)") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  ggtitle("Pay Hours by Crew ID (Filtered for >50 Pay Hours)")


```

