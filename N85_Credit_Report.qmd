---
title: "N85_Credit_Report"
format: html
editor: visual
---

```{r}
if (!require(librarian)){
  install.packages("librarian")
  library(librarian)
}

# librarian downloads, if not already downloaded, and reads in needed packages
librarian::shelf(tidyverse, here, DBI, odbc, padr)

```

```{r}
# Connect to the `PLAYGROUND` database and append data if necessary
tryCatch({
  db_connection <- DBI::dbConnect(odbc::odbc(),  # Establish a database connection using ODBC for the playground database
                                     Driver = "SnowflakeDSIIDriver",  # Specify the Snowflake ODBC driver
                                     Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",  # Server address
                                     WAREHOUSE = "DATA_LAKE_READER",  # Specify the Snowflake warehouse
                                     Database = "ENTERPRISE",  # Specify the database name
                                     UID = "jacob.eisaguirre@hawaiianair.com",  # User ID for authentication
                                     authenticator = "externalbrowser")  # Use external browser for authentication
  print("Database Connected!")  # Print success message if connection is established
}, error = function(cond) {
  print("Unable to connect to Database.")  # Print error message if connection fails
})

# Set schema and retrieve data from `AA_FINAL_PAIRING` table
dbExecute(db_connection, "USE SCHEMA CREW_ANALYTICS") 



```

```{r}

q_master_history <- "SELECT * FROM CT_MASTER_HISTORY WHERE BID_PERIOD = '2024-10';"

mh <- dbGetQuery(db_connection, q_master_history) 


min_date <- min(mh$PAIRING_DATE, na.rm = TRUE) 

max_date <- max(mh$PAIRING_DATE, na.rm = TRUE) 


q_master_pairing <- "SELECT * FROM CT_MASTER_PAIRING WHERE BID_PERIOD = '2024-10';"

mp <- dbGetQuery(db_connection, q_master_pairing) 

q_msched <- paste0("select * from CT_FLIGHT_LEG WHERE PAIRING_DATE BETWEEN'", min_date,"' AND '", max_date,"';")

raw_fl <- dbGetQuery(db_connection, q_msched)

```



## Reserve List
```{r}

rlv_FAs <- mh %>% 
  #filter(PAIRING_DATE == "2024-10-25") %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>% 
  group_by(CREW_ID) %>% 
  filter(#update_dt == max(update_dt), 
         CREW_INDICATOR == "FA",
         TRANSACTION_CODE %in% c("RLV", "RSV"),
         !LINE_TYPE == "B") %>% 
  ungroup() %>% 
  select(CREW_ID) %>% 
  distinct()

```

## Get Reserve ASN Credit
```{r}

explore_asn <- mp %>%
  filter(
         CREW_INDICATOR == "FA",
         #PAIRING_DATE == "2024-10-25"
         ) %>%
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
  group_by(CREW_ID, PAIRING_DATE) %>%
  filter(update_dt == max(update_dt),
         #TRANSACTION_CODE %in% c("ARC"),
         ) %>% 
  select(CREW_ID, BID_PERIOD, PAIRING_NO, PAIRING_ASSIGNMENT_CODE, PAIRING_DATE, PAIRING_POSITION) %>% 
  ungroup() %>% 
  filter(!PAIRING_ASSIGNMENT_CODE == c("2SK"))






```

## MS
```{r}
final_tran <- mh %>%
  filter(!TRANSACTION_CODE == "SNO") %>% 
  mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
  group_by(CREW_ID, PAIRING_DATE) %>%
  filter(update_dt == max(update_dt)) %>% 
  select(!c(update_dt)) %>% 
  ungroup() %>% 
  filter(TRANSACTION_CODE %in%  c("VC1", "VC2", "MIL", "UNI", "2CB", "2SK", "FLV", "FLP", "VCB")) %>% 
  filter(CREW_ID %in% rlv_FAs$CREW_ID) %>%
  group_by(CREW_ID, PAIRING_DATE) %>% 
  # Filter to keep only "FLV" if both "FLP" and "FLV" are present on the same day
  filter(!(any(TRANSACTION_CODE == "FLV") & TRANSACTION_CODE == "FLP")) %>%
  ungroup() %>% 
  group_by(CREW_ID, TRANSACTION_CODE) %>%
  select(CREW_ID, BID_PERIOD, BASE, PAIRING_NO, TRANSACTION_CODE, PAIRING_DATE, TO_DATE, PAIRING_POSITION, CREDIT) %>% 
  rename(combined_credit = CREDIT) %>% 
  mutate(combined_credit = round(as.numeric(hms(combined_credit)), 2) / 3600,
         flag = if_else(TRANSACTION_CODE == "2SK" & !is.na(PAIRING_NO), 1, 0),
         flag_3 = if_else(TRANSACTION_CODE == "FLP" & !is.na(PAIRING_NO), 1, 0)) %>% 
  filter(!flag == 1) %>%
  filter(!flag_3 == 1) %>% 
  ungroup() %>% 
  group_by(CREW_ID, TRANSACTION_CODE, PAIRING_DATE) %>%
  filter(combined_credit == max(combined_credit)) %>% 
  ungroup() %>%
  group_by(CREW_ID, TRANSACTION_CODE) %>%
  mutate(flag_2 = if_else(!PAIRING_DATE == TO_DATE & TRANSACTION_CODE == "2SK", 1, 0)) %>%
  filter(flag_2 == 0) %>%
  select(!c(flag, flag_2, flag_3)) %>% 
  ungroup()





```


## Credit from Master History
```{r}

# cred_ms <- raw_fl %>% 
#   filter(#SCHED_CREDIT > 0,
#          PAIRING_DATE == "2024-10-25",
#          ) %>% 
#   group_by(FLIGHT_NO, PAIRING_DATE, PAIRING_NO, FLIGHT_DATE, DEPARTING_CITY, 
#            ARRIVAL_CITY, SCHED_DEPARTURE_DATE, SCHED_DEPARTURE_TIME, SCHED_ARRIVAL_DATE,
#            SCHED_ARRIVAL_TIME) %>% 
#   mutate(update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
#   mutate(temp_id = cur_group_id()) %>%
#   filter(is.na(DEADHEAD),
#          #!duplicated(temp_id)
#          ) %>%
#   #filter(PAIRING_NO %in% explore_asn$PAIRING_NO) %>%
#   select(FLIGHT_NO, PAIRING_DATE, PAIRING_NO, 
#          DEPARTING_CITY, ARRIVAL_CITY, SCHED_DEPARTURE_DATE, SCHED_DEPARTURE_TIME, SCHED_ARRIVAL_DATE,
#            SCHED_ARRIVAL_TIME) %>% 
#   ungroup() %>% 
#   distinct()
  

```




## Pairing Master
```{r}

pm_q <- paste0("select PAIRING_DATE, PAIRING_NO, FLIGHT_NO, CREW_INDICATOR, PAIRING_POSITION, BID_TYPE,
         ACT_CREDIT_INT_TIME, ACT_CREDIT_DOM_TIME, UPDATE_DATE, UPDATE_TIME
         from CT_PAIRING_MASTER 
         where PAIRING_DATE BETWEEN'", min_date,"' AND '", max_date,"';")

# ACT_CREDIT_CO_DOM_TIME, ACT_CREDIT_CO_INT_TIME, ACT_CREDIT_DOM_TIME, ACT_DEADHEAD_CREDIT_CO_DOM_TIME, ACT_DEADHEAD_CREDIT_CO_INT_TIME, ACT_DH_CREDIT_DOM_TIME,
#ACT_DH_CREDIT_INT_TIME,

raw_pm <- dbGetQuery(db_connection, pm_q)

mid_pm <- raw_pm %>% 
  #select(PAIRING_DATE, PAIRING_NO, FLIGHT_NO, CREW_INDICATOR, PAIRING_POSITION, ACT_CREDIT_INT_TIME,  UPDATE_DATE, UPDATE_TIME) %>% 
  filter(CREW_INDICATOR == "FA") %>% 
  group_by(PAIRING_DATE, PAIRING_NO, FLIGHT_NO) %>% 
  mutate(temp_id = cur_group_id(),
         update_dt = paste(UPDATE_DATE, UPDATE_TIME, sep = " ")) %>%
  filter(
         #!duplicated(temp_id),
         update_dt == max(update_dt)
         ) %>%
  select(-PAIRING_POSITION) %>%
  ungroup() %>%
  # Convert all columns starting with "ACT" to decimal hours
  mutate(across(starts_with("ACT"), ~ round(as.numeric(hms(.)), 2) / 3600)) %>%
  # Calculate combined_credit as the sum of all "ACT" columns
  mutate(combined_credit = rowSums(select(., starts_with("ACT")), na.rm = TRUE), .after = CREW_INDICATOR) %>% 
  select(PAIRING_NO, PAIRING_DATE, FLIGHT_NO, CREW_INDICATOR, combined_credit) 


#22930

# do pairing assingment codes look ok?
# does VAC count towards N85 credit?
# sum across ACT credit columns correctly?

cred_final <- inner_join(explore_asn, mid_pm) %>% 
  group_by(CREW_ID, PAIRING_NO, PAIRING_DATE, FLIGHT_NO) %>% 
  mutate(temp_id = cur_group_id()) %>% 
  filter(!duplicated(temp_id),
         CREW_ID %in% c(rlv_FAs$CREW_ID)) %>% 
  ungroup() %>% 
  mutate(PAIRING_NO = factor(PAIRING_NO, levels = unique(PAIRING_NO[order(nchar(PAIRING_NO), PAIRING_NO)]))) %>%
  # Arrange data by CREW_ID, PAIRING_DATE, and ordered PAIRING_NO
  arrange(CREW_ID, PAIRING_DATE, PAIRING_NO) %>%
  # Group by CREW_ID and PAIRING_DATE
  group_by(CREW_ID, PAIRING_DATE) %>%
  # Filter to keep only the row with the largest suffix in PAIRING_NO
  slice_max(PAIRING_NO) %>%
  ungroup() %>% 
  filter(!PAIRING_ASSIGNMENT_CODE %in% c("O75", "TTD", "TSD", "SOP", "VNO", "FLU", "PLS", "UNA", "NOS", "XXX", 
                                         "VC1", "VC2", "MIL", "UNI", "2CB", "2SK", "FLV", "FLP", "VCB"), # Do we need "REM"?
         #PAIRING_ASSIGNMENT_CODE == "ASN"
         ) %>% 
  select(!c(temp_id)) %>% 
  plyr::rbind.fill(final_tran) %>% 
  unite("TRANSACTION_CODE", c(PAIRING_ASSIGNMENT_CODE, TRANSACTION_CODE), sep = "", na.rm = T) %>% 
  select(!c(BASE, CREW_INDICATOR, TO_DATE))

#write_csv(cred_final, here("employee_cred_per_day.csv"))

```


```{r}

#22930

t <- cred_final %>% 
  group_by(CREW_ID) %>% 
  reframe(monthly_credit = sum(combined_credit))

#write_csv(t, here("monthly_employee_agg.csv"))
#

z <- cred_final %>% 
  group_by(CREW_ID, PAIRING_DATE) %>% 
  mutate(temp_id = cur_group_id()) %>% 
  filter(duplicated(temp_id))

x <- cred_final %>% 
  group_by(CREW_ID, PAIRING_DATE) %>% 
  mutate(temp_id = cur_group_id()) 

c <- cred_final %>% 
  group_by(CREW_ID) %>% 
  filter(any(TRANSACTION_CODE == "FAR")) %>% 
  ungroup() %>% 
  group_by(CREW_ID, PAIRING_DATE) %>% 
  mutate(flag = as.integer(any(TRANSACTION_CODE == "FAR"))) %>%
  ungroup()

```


```{r}
# Connect to the `PLAYGROUND` database and append data if necessary
tryCatch({
  db_connection <- DBI::dbConnect(odbc::odbc(),  # Establish a database connection using ODBC for the playground database
                                     Driver = "SnowflakeDSIIDriver",  # Specify the Snowflake ODBC driver
                                     Server = "hawaiianair.west-us-2.azure.snowflakecomputing.com",  # Server address
                                     WAREHOUSE = "DATA_LAKE_READER",  # Specify the Snowflake warehouse
                                     Database = "RAW",  # Specify the database name
                                     UID = "jacob.eisaguirre@hawaiianair.com",  # User ID for authentication
                                     authenticator = "externalbrowser")  # Use external browser for authentication
  print("Database Connected!")  # Print success message if connection is established
}, error = function(cond) {
  print("Unable to connect to Database.")  # Print error message if connection fails
})

# Set schema and retrieve data from `AA_FINAL_PAIRING` table
dbExecute(db_connection, "USE SCHEMA HA") 

ctc_ms <- "select * from CTC_CREWTRACCABIN_MASTER_SCHEDULE WHERE MASTID_BIDATE = '202410';"

raw_ctc_ms <- dbGetQuery(db_connection, ctc_ms)

ctc_ms <- raw_ctc_ms %>%
  # Combine date and time fields
  mutate(update_dt = paste(UPDATEID_UPDDATE, UPDATEID_UPDTIME, sep = "")) %>%
  mutate(
    EFFECTIVE_FROMDATE = as.Date(EFFECTIVE_FROMDATE, format = "%Y%m%d"),
    EFFECTIVE_TODATE = as.Date(EFFECTIVE_TODATE, format = "%Y%m%d")
  ) %>%
  group_by(MASTID_EMPNO) %>% 
  filter(update_dt == max(update_dt)) %>% 
  select(MASTID_EMPNO, MASTID_BIDATE, BASE, EFFECTIVE_FROMDATE, EFFECTIVE_TODATE, PAYHRS) %>% 
  rename(
    CREW_ID = MASTID_EMPNO,
    BID_PERIOD = MASTID_BIDATE
  ) %>% 
  filter(
    CREW_ID %in% c(rlv_FAs$CREW_ID),
    PAYHRS > 0
  ) %>%
  # Convert PAYHRS to decimal hours
  mutate(PAYHRS = PAYHRS / 60)

  

```

```{r}


# Filter data to only include PAYHRS > 50 and arrange by PAYHRS
ctc_ms_filtered <- t %>% 
  filter(monthly_credit > 100) %>%
  arrange(desc(monthly_credit)) %>%  # Arrange in ascending order for descending plot order
  mutate(CREW_ID = factor(CREW_ID, levels = unique(CREW_ID)))  # Order CREW_ID by PAYHRS in ascending order

# Create the plot with descending bars
ggplot(ctc_ms_filtered, aes(x = CREW_ID, y = monthly_credit)) +
  geom_bar(stat = "identity", fill = "#5A2D81") +
  theme_classic() +
  labs(x = "Crew ID", y = "Credit Hours (Decimal)") +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"  # Remove the legend
  ) +
  ggtitle("Bid Period Credit Sum Towards N85")


```

